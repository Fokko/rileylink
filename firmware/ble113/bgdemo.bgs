
const CMD_NOP=0
const CMD_GET_CHANNEL=1
const CMD_SET_CHANNEL=2
const CMD_GET_LENGTH=3
const CMD_GET_BYTE=4
const CMD_RESET=5
const CMD_GET_ERROR=6
const CMD_GET_BUFFER_USAGE_LOW_BYTE=7
const CMD_GET_BUFFER_USAGE_HIGH_BYTE=8

dim tmp(1)
dim buf(128)
dim buf_len
dim buf_idx
dim name(32)
dim name_len
dim psize
dim out_buf(128)
dim out_len
dim out_idx
dim radio_mode
dim result
dim channel
dim tlen
dim bytes_to_send
dim packet_count

#variable to save handle
dim batconn_handle

#store battery measurement result
dim batresult

event system_boot(major,minor,patch,build,ll_version,protocol,hw)	
	batconn_handle=$ff
	psize=0
	buf_len=0
	name_len=0

	call flash_ps_load($8000)(result, name_len, name(0:name_len))
	if result != 0 then
	  name_len = 9
	  name(0:1) = $52 # R
	  name(1:1) = $69 # i
	  name(2:1) = $6c # l
	  name(3:1) = $65 # e
	  name(4:1) = $79 # y
	  name(5:1) = $4c # L
	  name(6:1) = $69 # i
	  name(7:1) = $6e # n
	  name(8:1) = $6b # k
	end if
	
	#start advertising in connectible mode
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
		
	# Start a 50ms timer
	call hardware_set_soft_timer($666, 0, 0)
	
	# Make P0_0 and P0_4 outputs
	call hardware_io_port_config_direction(0, $13)
	
	# Turn P0_0 (green led) and P0_1 (blue led) off
	call hardware_io_port_write(0, $3, 0)
		
	# Send reset to radio
	call hardware_io_port_write(0, $10, 0)   # slave select low
	call hardware_spi_transfer(0,2,"\x05\x00")
	call hardware_io_port_write(0, $10, $10) # slave select high
	

	call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
	call attributes_write(xgatt_custom_name, 0, name_len, name(0:name_len))

end

procedure write_tx_packet()
	call hardware_io_port_write(0, $10, 0)  # ss low
	radio_mode = 2  # 2 == RADIO_MODE_TX
	while radio_mode = 2
		# Wait for radio to finish sending current packet
		call hardware_spi_transfer(0,1,10)  # 10 = CMD_GET_RADIO_MODE
		call hardware_spi_transfer(0,1,0)(result,channel,tlen,radio_mode)
	end while
	call hardware_spi_transfer(0,1,9)  # 9 = CMD_SEND_PACKET 
	call hardware_spi_transfer(0,1,out_len) 
	out_idx = 0
	while out_idx < out_len
		call hardware_spi_transfer(0,1,out_buf(out_idx:1))
		out_idx = out_idx + 1
	end while
	call hardware_io_port_write(0, $10, $10) # ss hi
end

procedure read_rx_packet()
  buf_len = 0  
  # poll cc1110 for packet length.  Returns 0 if no packets available
  call hardware_io_port_write(0, $10, 0)
  call hardware_spi_transfer(0,1,"\x03")
  call hardware_spi_transfer(0,1,"\x00")(result,channel,tlen,tmp(0))
  psize = tmp(0)
  
  if psize > 0
	 # ask cc1110 for packet rssi.
	call hardware_spi_transfer(0,1,"\x10")
	call hardware_spi_transfer(0,1,"\x00")(result,channel,tlen,buf(0))
	 # ask cc1110 for packet number.
	buf(1) = 77
	call hardware_spi_transfer(0,1,"\x07")
	call hardware_spi_transfer(0,1,"\x00")(result,channel,tlen,buf(1))
	buf_idx = 2
	while buf_idx < psize + 2
		call hardware_spi_transfer(0,1,"\x04")
		call hardware_spi_transfer(0,1,"\x00")(result,channel,tlen,buf(buf_idx))
		buf_idx = buf_idx + 1
	end while
	buf_len = buf_idx
	if buf_len = 0 then
	  #call hardware_io_port_write(0, 2, 2)
	end if
  end if
 
  call hardware_io_port_write(0, $10, $10)
end
  
procedure get_buf_bytes(connection, offset, maxsize)
  bytes_to_send = buf_len - offset
  if offset > buf_len then
    bytes_to_send = 0
  end if
  if bytes_to_send > maxsize then
    bytes_to_send = maxsize
  end if
  call attributes_user_read_response(connection,0,bytes_to_send,buf(offset:bytes_to_send))
  if offset + bytes_to_send >= buf_len then
    buf_len = 0
  end if
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
	if handle = xgatt_rx_channel then
		# Listen on channel specified by ble client
		call hardware_io_port_write(0, $10, 0)   # slave select low
		call hardware_spi_transfer(0,1,2)
		call hardware_spi_transfer(0,1,value_data(0:1))
		call hardware_io_port_write(0, $10, $10) # slave select high
	end if
	
	if handle = xgatt_tx_channel then
		# Future packets will be sent on this channel 
		call hardware_io_port_write(0, $10, 0)   # slave select low
		call hardware_spi_transfer(0,1,17)
		call hardware_spi_transfer(0,1,value_data(0:1))
		call hardware_io_port_write(0, $10, $10) # slave select high
	end if

	
	if handle = xgatt_custom_name then
	  memcpy(name(0), value_data(0), value_len)
	  name_len = value_len
	end if
	
	if handle = xgatt_tx_packet then
      out_buf(offset:value_len) = value_data(0:value_len)
      out_len = offset + value_len
    end if
	
	if handle = xgatt_tx_packet_trigger then
	  call write_tx_packet()
	end if

	if reason = 2 # User requesting response
	  call attributes_user_write_response(connection, 0)
	end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
	if handle = xgatt_battery then
		batconn_handle=connection
		#start measurement, read VDD/3, 9 effective bits 
		call hardware_adc_read(15,3,0)
	end if
	
	if handle = xgatt_rx_packet then

	  if buf_len = 0 then
        call read_rx_packet()
	  end if
	  call get_buf_bytes(connection, offset, maxsize)
	end if
end

event hardware_adc_result(input,value)
    #scale value to range 0-100
	#measurement range is 32768=1.15v*3=3.45V
	#new battery ADC measurement is 32767=3.45v
	#minimum battery voltage is 2.0 volts=2.0v/3.45v*32768= 18996
	#32767-18996=13771
	
	batresult=(value-18995)*100/13772
	
	#clip to 100%
	if batresult>100 then
		batresult=100
	end if
	if batresult<0 then
	    batresult=0
	end if

	tmp(0:1)=batresult

	if batconn_handle<$ff then
		#if connection handle is valid
		call attributes_user_read_response(batconn_handle,0,1,tmp(0:1))
		batconn_handle=$ff
	end if
end

# Timer event listener to update packet count
event hardware_soft_timer(handle)
  # poll cc1110 for packet count.
  call hardware_io_port_write(0, $10, 0)
  call hardware_spi_transfer(0,1,"\x0b")
  call hardware_spi_transfer(0,1,"\x00")(result,channel,tlen,tmp(0))
  call hardware_io_port_write(0, $10, $10)
  if tmp(0) != packet_count then
    packet_count = tmp(0)
	call attributes_write(xgatt_rx_packet_count,0,1,packet_count)
  end if 
  
  if packet_count > 0 then
    call hardware_io_port_write(0, $2, $2)
  else
    call hardware_io_port_write(0, $2, $0)
  end if
end


# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	# Device is connected. Turn on blue led
    call hardware_io_port_write(0, $1, $1)	
end

event connection_disconnected(handle,res)
    #start advertising again after disconnection
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	# Device disconnected. Turn off blue led
    call hardware_io_port_write(0, $1, $0)
	
	# Save name
	if name_len > 0
		call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
		call flash_ps_save($8000, name_len, name(0:name_len))
	end if

end
